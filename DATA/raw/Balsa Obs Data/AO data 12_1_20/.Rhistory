knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:\\Users\\avining\\Documents\\Lemur_Sleep"))
library(tidyverse)
library(nlme)
library(RColorBrewer)
sleep_data <- read_csv("./DATA/lemur_sleep_data.csv")
sleep_data$Session <- factor(sleep_data$Session)
sleep_data$Species <- factor(sleep_data$Species)
sleep_data$Experiment <- factor(sleep_data$Experiment, levels = c("base", "absence", "enhance"))
sleep_data$ID <- factor(sleep_data$ID, levels = c("Aria", "Geb", "Bertha", "Beatrice", "Avior", "Josephine", "Persephone", "Teres"))
sleep_data$Order <- rep(factor(c("absence", "enhance", "absence", "enhance", "absence", "enhance", "absence", "enhance")),
times = sapply(levels(sleep_data$ID), function(X) nrow(filter(sleep_data, ID == X))))
sleep_data <- read_csv("./DATA/lemur_sleep_data.csv")
sleep_data$Session <- factor(sleep_data$Session)
sleep_data$Species <- factor(sleep_data$Species)
sleep_data$Experiment <- factor(sleep_data$Experiment, levels = c("base", "absence", "enhance"))
sleep_data$ID <- factor(sleep_data$ID, levels = c("Aria", "Geb", "Bertha", "Beatrice", "Avior", "Josephine", "Persephone", "Teres"))
sleep_data$Order <- rep(factor(c("absence", "enhance", "absence", "enhance", "absence", "enhance", "absence", "enhance")),
times = sapply(levels(sleep_data$ID), function(X) nrow(filter(sleep_data, ID == X))))
data_summary <- sleep_data %>% group_by(ID) %>%
summarize(Base_N = sum(Experiment == "base"),
Base_Mean = round(mean(TTST[Experiment == "base"]),1),
Base_sd = round(sd(TTST[Experiment == "base"]),2),
Enriched_N = sum(Experiment == "enhance"),
Enr_Mean = round(mean(TTST[Experiment == "enhance"]),1),
Enr_sd = round(sd(TTST[Experiment == "enhance"]),2),
Impoverished_N = sum(Experiment == "absence"),
Imp_Mean = round(mean(TTST[Experiment == "absence"]),1),
Imp_sd = round(sd(TTST[Experiment == "absence"]),2))
write.csv(data_summary, "../Results/Table 1-Lemur Sleep Summary.csv")
list.files()
setwd("~/Lemur_Sleep/CODE")
data_summary <- sleep_data %>% group_by(ID) %>%
summarize(Base_N = sum(Experiment == "base"),
Base_Mean = round(mean(TTST[Experiment == "base"]),1),
Base_sd = round(sd(TTST[Experiment == "base"]),2),
Enriched_N = sum(Experiment == "enhance"),
Enr_Mean = round(mean(TTST[Experiment == "enhance"]),1),
Enr_sd = round(sd(TTST[Experiment == "enhance"]),2),
Impoverished_N = sum(Experiment == "absence"),
Imp_Mean = round(mean(TTST[Experiment == "absence"]),1),
Imp_sd = round(sd(TTST[Experiment == "absence"]),2))
write.csv(data_summary, "../Results/Table 1-Lemur Sleep Summary.csv")
write.csv(data_summary, "../Results/Table 1-Lemur Sleep Summary.csv")
data_summary
View(data_summary)
write.csv(data_summary, "../Results/Table 1-Lemur Sleep Summary.csv")
write.csv(data_summary, "../Results/Table 1_Lemur Sleep Summary.csv")
png(filename = "../Docs/Figure 2-Lemur Sleep Patterns.png", width = 1200, height = 800)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:\\Users\\avining\\Documents\\Lemur_Sleep"))
library(tidyverse)
library(nlme)
library(RColorBrewer)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:\\Users\\avining\\Documents\\Lemur_Sleep"))
library(tidyverse)
library(nlme)
library(RColorBrewer)
sleep_data <- read_csv("./DATA/lemur_sleep_data.csv")
sleep_data$Session <- factor(sleep_data$Session)
sleep_data$Species <- factor(sleep_data$Species)
sleep_data$Experiment <- factor(sleep_data$Experiment, levels = c("base", "absence", "enhance"))
sleep_data$ID <- factor(sleep_data$ID, levels = c("Aria", "Geb", "Bertha", "Beatrice", "Avior", "Josephine", "Persephone", "Teres"))
sleep_data$Order <- rep(factor(c("absence", "enhance", "absence", "enhance", "absence", "enhance", "absence", "enhance")),
times = sapply(levels(sleep_data$ID), function(X) nrow(filter(sleep_data, ID == X))))
m0_lemur_sleep <- lme(TTST ~ 1, data = sleep_data, random = day.from.zero | Species/ID)
m0_lemur_sleep <- lme(TTST ~ 1, data = sleep_data, random = ~day.from.zero | Species/ID)
m0_lemur_sleep <- lme(TTST ~ 1, data = sleep_data, random = ~Species/ID)
?pdDiag
m0_lemur_sleep <- lme(TTST ~ 1, data = sleep_data, random = ~1|Species/ID)
plot(ACF(m0_lemur_sleep, maxLag = 6), alpha = 0.05)
plot(ACF(m0_lemur_sleep, maxLag = 6), alpha = 0.01)
plot(ACF(m0_lemur_sleep, maxLag = 6), alpha = 0.05)
plot(ACF(m0_lemur_sleep, maxLag = 10), alpha = 0.05)
m1_lemur_sleep <- update(m0_lemur_sleep, correlation = corARMA(p = 1, form = ~ day.from.zero | Species/ID))
plot(ACF(m1_lemur_sleep, maxLag = 10), alpha = 0.05)
summary(m1_lemur_sleep)
intervals(fm2Over.lme)
intervals(m1_lemur_sleep) #look at confidence intervals for within group correlation parameters
plot(ACF(m1_lemur_sleep, maxLag = 10), alpha = 0.05)
?ACF
plot(ACF(m1_lemur_sleep, maxLag = 10, resType = "n"), alpha = 0.05)
anova(m0_lemur_sleep, m1_lemur_sleep)
m1_lemur_sleep <- update(m0_lemur_sleep, correlation = corARMA(p = 1, form = ~ day.from.zero | Species/ID))
summary(m1_lemur_sleep)
intervals(m1_lemur_sleep) #look at confidence intervals for within group correlation parameters
plot(ACF(m1_lemur_sleep, maxLag = 10, resType = "n"), alpha = 0.05) #reduced lag one correlation of normalized residuals. Still notable correlation at lag 9, but given this high order, non-significance, and small dataset, probably not worth worrying about.
anova(m0_lemur_sleep, m1_lemur_sleep)
m2_lemur_sleep <- update(form = ~ Experiment * Order)
m2_lemur_sleep <- update(m1_lemur_sleep, form = ~ Experiment * Order)
?update
m2_lemur_sleep <- update(m1_lemur_sleep, formula = TTST ~ Experiment * Order)
m2_lemur_sleep <- update(m1_lemur_sleep, formula. = TTST ~ Experiment * Order)
?update
m2_lemur_sleep <- update(m1_lemur_sleep, . ~ Experiment * Order)
summary(m2_lemur_sleep)
intervals(m2_lemur_sleep)
intervals(m2_lemur_sleep) #Lag1 correlation parameter estimate includes 0 in confidence interval
#Huge uncertainty on species level random effect
plot(ACF(m1_lemur_sleep, maxLag = 10, resType = "n"), alpha = 0.05)
#Huge uncertainty on species level random effect
plot(ACF(m2_lemur_sleep, maxLag = 10, resType = "n"), alpha = 0.05)
#add lag 2 AR parameter to try to account for significant negative lag 3 autocorrelation in m2
m3_lemur_sleep <- update(m2_lemur_sleep, correlation = corARMA(p = 2, form = ~ day.from.zero | Species/ID))
intervals(m3_lemur_sleep)
plot(ACF(m3_lemur_sleep, maxLag = 10, resType = "n"), alpha = 0.05)
anova(m2_lemur_sleep, m3_lemur_sleep)
#See if lag 3 does the trick (I suspect it will)
m4_lemur_sleep <- update(m2_lemur_sleep, correlation = corARMA(p = 3, form = ~ day.from.zero | Species/ID))
intervals(m4_lemur_sleep)
plot(ACF(m4_lemur_sleep, maxLag = 10, resType = "n"), alpha = 0.05) # still see autocorrelation
anova(m2_lemur_sleep, m4_lemur_sleep)
#1 last look at corARMA stucture, using MA only
m5_lemur_sleep <- update(m2_lemur_sleep, correlation = corARMA(q = 3, form = ~ day.from.zero | Species/ID))
intervals(m5_lemur_sleep)
plot(ACF(m5_lemur_sleep, maxLag = 10, resType = "n"), alpha = 0.05)
anova(m2_lemur_sleep, m5_lemur_sleep)
anova(m2_lemur_sleep,m1_lemur_sleep)
diagnostics_data <- mutate(m2_lemur_sleep$data, prediction = predict(m2_lemur_sleep), residual = residuals(m2_lemur_sleep))
ggplot(diagnostics_data) + geom_point(aes(x = prediction, y = residual/sd(residual))) + theme_classic() #Pearson's residuals on y. largely normal and homoskedastic
#Predictions don't account for AR. Why not? Is this a problem?
qqnorm(m2_lemur_sleep) #pearson residual quantiles look standard normal
anova(m2_lemur_sleep)
anova(m2_lemur_sleep, L = c(-1,1,0))
summary(m2_lemur_sleep)
##~absence v baseline
absence_v_baseline_algebra <- c(0, 1, 0, 0, 0.5, 0)#When multiplied by coefficients matrix from model 2, calculates effect of impoverishment marginal to order (with equal weights)
absence_v_baseline_contrast <- absence_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
absence_v_baseline_contrast_sd <- t(absence_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% absence_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
print(paste("contrast of impoverished and baseline sleep marginal to order is", absence_v_baseline_contrast, "with sd = ", absence_v_baseline_contrast_sd, sep = " "))
anova(m2_lemur_sleep, L = c(-1,0,1))
anova(m2_lemur_sleep, L = c(0,-1,1))
anova(m2_lemur_sleep, L = c(-1,1,1)) #despite the text output, I feel like this must be baseline v absense . . .
?anova
anova(m2_lemur_sleep, L = c(-1,1)) #baseline v absense, this can't be right
anova(m2_lemur_sleep, L = c(0, 0, 1, 0, 0,0.5)) #baseline v absense, this can't be right
anova(m2_lemur_sleep, L = c(0, 1, 0, 0, 0.5, 0)) #baseline v absence
anova(m2_lemur_sleep, L = c(0, -1, 1, 0, -0.5, 0.5)) #enriched v impoverished
anova(m2_lemur_sleep, L = c(0, 0, 1, 0, 0, 0.5)) #baseline v enriched contrast, significantly different
anova(m2_lemur_sleep, L = c(0, 1, 0, 0, 0.5, 0)) #baseline v impoverished, not significantly different
anova(m2_lemur_sleep, L = c(0, -1, 1, 0, -0.5, 0.5)) #enriched v impoverished, significant difference
#effect contrasts marginal to order, get means and sd
#manual calculation of mean contrast of enriched vs. impoverished; used to validate matrix multiplication methods useful for attaining contrast sd, as done further below
experiment_contrast_marginal_order <- m2_lemur_sleep$coefficients$fixed["Experimentenhance"] - m2_lemur_sleep$coefficients$fixed["Experimentabsence"] + diff(m2_lemur_sleep$coefficients$fixed[c("Experimentabsence:Orderenhance","Experimentenhance:Orderenhance")])/2 #diff subtracts first element from second
##~enhanced v baseline
enhanced_v_baseline_algebra <- c(0, 0, 1, 0, 0,0.5) #When multiplied by coefficients matrix from model 2, calculates effect of enrichment marginal to order (with equal weights)
enhanced_v_baseline_contrast <- enhanced_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
enhanced_v_baseline_contrast_sd <- t(enhanced_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~absence v baseline
absence_v_baseline_algebra <- c(0, 1, 0, 0, 0.5, 0)#When multiplied by coefficients matrix from model 2, calculates effect of impoverishment marginal to order (with equal weights)
absence_v_baseline_contrast <- absence_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
absence_v_baseline_contrast_sd <- t(absence_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% absence_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~enhanced v absence
enhanced_v_absence_algebra <- c(0, -1, 1, 0, -0.5, 0.5) #rename algebra. When multiplied by coefficients from model 2, does the algebra from line 86. Can also be multiplied by vcv to find sd.
enhanced_v_absence_contrast <- enhanced_v_absence_algebra %*% m2_lemur_sleep$coefficients$fixed #equivalent to line 86
enhanced_v_absence_contrast_sd <- t(enhanced_v_absence_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_absence_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
print(paste("contrast of enriched and baseline sleep marginal to order is", enhanced_v_baseline_contrast, "with sd = ", enhanced_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of impoverished and baseline sleep marginal to order is", absence_v_baseline_contrast, "with sd = ", absence_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of enriched and absence sleep marginal to order is", enhanced_v_absence_contrast, "with sd = ", enhanced_v_absence_contrast_sd, sep = " "))
summary(m2_lemur_sleep)
#Compare sources of variance
var_cov_rand <- VarCorr(m2_lemur_sleep) #variance covaraince matrix of random effects in model 2
#Huge uncertainty on species level random effect
plot(ACF(m2_lemur_sleep, maxLag = 5, resType = "n"), alpha = 0.01) #significant lag3 autocorrelation !!
m0_lemur_sleep <- lme(TTST ~ 1, data = sleep_data, random = ~1|Species/ID, method = "ML")
plot(ACF(m0_lemur_sleep, maxLag = 6), alpha = 0.01)
m1_lemur_sleep <- update(m0_lemur_sleep, correlation = corARMA(p = 1, form = ~ day.from.zero | Species/ID), method = "ML")
m2_lemur_sleep <- update(m1_lemur_sleep, . ~ Experiment * Order, method = "ML")
anova(m2_lemur_sleep,m1_lemur_sleep) #despite introducing some lag3 autocorrelation into within-group normalized residuals, experimental structure greatly increases the model fit.
AIC(m2_lemur_sleep,m1_lemur_sleep) #despite introducing some lag3 autocorrelation into within-group normalized residuals, experimental structure greatly increases the model fit.
??forecast
setwd("C:/Users/avining/ownCloud/Alexanders_Dissertation/5. The Travelling Frugivore")
library(tidyverse)
data_cleaned <- read_csv("./Results/data_cleaned.csv",col_types = "dccccdddddc")
setwd("C:/Users/avining/ownCloud/Alexanders_Dissertation/5. The Travelling Frugivore")
source("./CODE/Array_Processing.R")
library(ggplot2)
ggplot(Double_Trapezoid) + geom_sf_label(aes(label = NAME), size = 8, label.padding = unit(0.4, "lines")) + theme_classic() + coord_fixed() + theme(title = element_text(size = 20), axis.title = element_blank(), axis.text = element_text(size = 20)) + labs(title = "A) Double Trapezoid")
ggplot(Z) + geom_sf_label(aes(label = NAME), size = 8, label.padding = unit(0.4, "lines")) + theme_classic() + coord_fixed() + theme(title = element_text(size = 20), axis.title = element_blank(), axis.text = element_text(size = 20)) + labs(title = "B) Z-Array")
ggplot(Pentagon) + geom_sf_label(aes(label = NAME), size = 8, label.padding = unit(0.4, "lines")) + theme_classic() + coord_fixed() + theme(title = element_text(size = 20), axis.title = element_blank(), axis.text = element_text(size = 20)) + labs(title = "C) Pentagon")
setwd("C:/Users/avining/ownCloud/Alexanders_Dissertation/5. The Travelling Frugivore")
library(tidyverse)
data_cleaned <- read_csv("./Results/data_cleaned.csv",col_types = "dccccdddddc")
data_cleaned %>% filter(Source != "Experimental", Species ==  "None", Trial > 1) %>%
ggplot(aes(x = Trial, y = DET)) +
geom_smooth(aes(color = Source), method = "gam") +
facet_wrap(~Array) +
theme_classic()
data_cleaned %>% filter(Source != "Experimental", Species ==  "None") %>%
ggplot(aes(x = Trial, y = Distance)) +
geom_smooth(aes(color = Source), method = "gam") +
facet_wrap(~Array) +
theme_classic()
linear_fit_DET_byID <- data_cleaned %>% filter(Trial <= 20) %>%
group_by(ID, Array) %>%
filter(max(Trial) >= 5) %>% #2 trials are necessary for calculating DET, 3 for a linear fit
mutate(Trial = Trial - 1) %>% #Trial 2 is the first in which DET is measured, so we treat it as trial 1 here
group_map(~glm(DET ~ Trial, weights = Recursions, family = "binomial", data = .x)) #logit link is assumed for fit to binomial distribution
linear_fit_DET_summary <- data_cleaned %>% filter(Trial <= 20) %>%
group_by(ID, Array, Species, Source) %>%
filter(max(Trial) >= 5) %>%
mutate(Trial = Trial - 1) %>%
summarize(Intercept = glm(DET ~ Trial,
weights = Recursions,
family = "binomial")$coefficients[1],
Slope = glm(DET ~ Trial,
weights = Recursions,
family = "binomial")$coefficients[2])
DET_linear_fit_plot <- linear_fit_DET_summary %>% filter(Source == "Experimental") %>%
ggplot() + facet_wrap(~Array) + theme_classic()
sleep_data <- read_csv("./DATA/lemur_sleep_data.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:\\Users\\avining\\Documents\\Lemur_Sleep"))
library(tidyverse)
library(nlme)
library(RColorBrewer)
sleep_data <- read_csv("./DATA/lemur_sleep_data.csv")
sleep_data$Session <- factor(sleep_data$Session)
sleep_data$Species <- factor(sleep_data$Species)
sleep_data$Experiment <- factor(sleep_data$Experiment, levels = c("base", "absence", "enhance")) #order factor levels of experimental condition to set up baseline as intercept
sleep_data$ID <- factor(sleep_data$ID, levels = c("Aria", "Geb", "Bertha", "Beatrice", "Avior", "Josephine", "Persephone", "Teres")) #order factor levels for nice plots
#add the experimental order to data frame (previously encoded trial by trial in the Session column)
sleep_data$Order <- rep(factor(c("absence", "enhance", "absence", "enhance", "absence", "enhance", "absence", "enhance")),
times = sapply(levels(sleep_data$ID), function(X) nrow(filter(sleep_data, ID == X))))
m0_lemur_sleep <- lme(TTST ~ 1, data = sleep_data, random = ~1|Species/ID, method = "ML")
plot(ACF(m0_lemur_sleep, maxLag = 6), alpha = 0.01)
m1_lemur_sleep <- update(m0_lemur_sleep, correlation = corARMA(p = 1, form = ~ day.from.zero | Species/ID), method = "ML")
summary(m1_lemur_sleep)
plot(ACF(m1_lemur_sleep, maxLag = 6, resType = "n"), alpha = 0.01) #reduced lag one correlation of normalized residuals. Still notable correlation at lag 9, but given this high order, non-significance, and small dataset, probably not worth worrying about.
AIC(m0_lemur_sleep, m1_lemur_sleep)
m2_lemur_sleep <- update(m1_lemur_sleep, . ~ Experiment * Order, method = "ML")
summary(m2_lemur_sleep)
plot(ACF(m2_lemur_sleep, maxLag = 5, resType = "n"), alpha = 0.01)
AIC(m2_lemur_sleep,m1_lemur_sleep) #despite introducing some lag3 autocorrelation into within-group normalized residuals, experimental structure greatly increases the model fit.
diagnostics_data <- mutate(m2_lemur_sleep$data, prediction = predict(m2_lemur_sleep), residual = residuals(m2_lemur_sleep))
ggplot(diagnostics_data) + geom_point(aes(x = prediction, y = residual/sd(residual))) + theme_classic() #Pearson's residuals on y. largely normal and homoskedastic
#Predictions don't account for AR. Why not? Is this a problem?
qqnorm(m2_lemur_sleep) #pearson residual quantiles look standard normal
#effect contrasts marginal to order, get means and se
#manual calculation of mean contrast of enriched vs. impoverished; used to validate matrix multiplication methods useful for attaining contrast se, as done further below
experiment_contrast_marginal_order <- m2_lemur_sleep$coefficients$fixed["Experimentenhance"] - m2_lemur_sleep$coefficients$fixed["Experimentabsence"] + diff(m2_lemur_sleep$coefficients$fixed[c("Experimentabsence:Orderenhance","Experimentenhance:Orderenhance")])/2 #diff subtracts first element from second
##~enhanced v baseline
enhanced_v_baseline_algebra <- c(intercept = 0, phi = 0, 1, 0, 0,0.5) #When multiplied by coefficients matrix from model 2, calculates effect of enrichment marginal to order (with equal weights)
enhanced_v_baseline_contrast <- enhanced_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
enhanced_v_baseline_contrast_sd <- t(enhanced_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~absence v baseline
absence_v_baseline_algebra <- c(0, 1, 0, 0, 0.5, 0)#When multiplied by coefficients matrix from model 2, calculates effect of impoverishment marginal to order (with equal weights)
absence_v_baseline_contrast <- absence_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
absence_v_baseline_contrast_sd <- t(absence_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% absence_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~enhanced v absence
enhanced_v_absence_algebra <- c(0, -1, 1, 0, -0.5, 0.5) #rename algebra. When multiplied by coefficients from model 2, does the algebra from line 86. Can also be multiplied by vcv to find sd.
enhanced_v_absence_contrast <- enhanced_v_absence_algebra %*% m2_lemur_sleep$coefficients$fixed #equivalent to line 86
enhanced_v_absence_contrast_sd <- t(enhanced_v_absence_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_absence_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
print(paste("contrast of enriched and baseline sleep marginal to order is", enhanced_v_baseline_contrast, "with sd = ", enhanced_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of impoverished and baseline sleep marginal to order is", absence_v_baseline_contrast, "with sd = ", absence_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of enriched and absence sleep marginal to order is", enhanced_v_absence_contrast, "with sd = ", enhanced_v_absence_contrast_sd, sep = " "))
m2_lemur_sleep$coefficients$fixed
#effect contrasts marginal to order, get means and se
#manual calculation of mean contrast of enriched vs. impoverished; used to validate matrix multiplication methods useful for attaining contrast se, as done further below
experiment_contrast_marginal_order <- m2_lemur_sleep$coefficients$fixed["Experimentenhance"] - m2_lemur_sleep$coefficients$fixed["Experimentabsence"] + diff(m2_lemur_sleep$coefficients$fixed[c("Experimentabsence:Orderenhance","Experimentenhance:Orderenhance")])/2 #diff subtracts first element from second
##~enhanced v baseline
enhanced_v_baseline_algebra <- c(intercept = 0, impoverish = 0, enrich = 1, enrich_first = 0, imp_by_enr1st = 0, enr_by_enr1 = -0.5) #When multiplied by coefficients matrix from model 2, calculates effect of enrichment marginal to order (with equal weights)
enhanced_v_baseline_contrast <- enhanced_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
enhanced_v_baseline_contrast_sd <- t(enhanced_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~absence v baseline
absence_v_baseline_algebra <- c(intercept = 0, impoverish = 1, enrich = 1, enrich_first = 0, imp_by_enr1st = 0.5, enr_by_enr1 = 0)#When multiplied by coefficients matrix from model 2, calculates effect of impoverishment marginal to order (with equal weights)
absence_v_baseline_contrast <- absence_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
absence_v_baseline_contrast_sd <- t(absence_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% absence_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~enhanced v absence
enhanced_v_absence_algebra <- c(intercept = 0, impoverish = -1, enrich = 1, enrich_first = 0, imp_by_enr1st = -0.5, enr_by_enr1 = 0.5) #rename algebra. When multiplied by coefficients from model 2, does the algebra from line 86. Can also be multiplied by vcv to find sd.
enhanced_v_absence_contrast <- enhanced_v_absence_algebra %*% m2_lemur_sleep$coefficients$fixed #equivalent to line 86
enhanced_v_absence_contrast_sd <- t(enhanced_v_absence_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_absence_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
print(paste("contrast of enriched and baseline sleep marginal to order is", enhanced_v_baseline_contrast, "with sd = ", enhanced_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of impoverished and baseline sleep marginal to order is", absence_v_baseline_contrast, "with sd = ", absence_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of enriched and absence sleep marginal to order is", enhanced_v_absence_contrast, "with sd = ", enhanced_v_absence_contrast_sd, sep = " "))
#effect contrasts marginal to order, get means and se
#manual calculation of mean contrast of enriched vs. impoverished; used to validate matrix multiplication methods useful for attaining contrast se, as done further below
experiment_contrast_marginal_order <- m2_lemur_sleep$coefficients$fixed["Experimentenhance"] - m2_lemur_sleep$coefficients$fixed["Experimentabsence"] + diff(m2_lemur_sleep$coefficients$fixed[c("Experimentabsence:Orderenhance","Experimentenhance:Orderenhance")])/2 #diff subtracts first element from second
##~enhanced v baseline
enhanced_v_baseline_algebra <- c(intercept = 0, impoverish = 0, enrich = 1, enrich_first = 0, imp_by_enr1st = 0, enr_by_enr1 = -0.5) #When multiplied by coefficients matrix from model 2, calculates effect of enrichment marginal to order (with equal weights)
enhanced_v_baseline_contrast <- enhanced_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
enhanced_v_baseline_contrast_sd <- t(enhanced_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~absence v baseline
absence_v_baseline_algebra <- c(intercept = 0, impoverish = 1, enrich = 0, enrich_first = 0, imp_by_enr1st = 0.5, enr_by_enr1 = 0)#When multiplied by coefficients matrix from model 2, calculates effect of impoverishment marginal to order (with equal weights)
absence_v_baseline_contrast <- absence_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
absence_v_baseline_contrast_sd <- t(absence_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% absence_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~enhanced v absence
enhanced_v_absence_algebra <- c(intercept = 0, impoverish = -1, enrich = 1, enrich_first = 0, imp_by_enr1st = -0.5, enr_by_enr1 = 0.5) #rename algebra. When multiplied by coefficients from model 2, does the algebra from line 86. Can also be multiplied by vcv to find sd.
enhanced_v_absence_contrast <- enhanced_v_absence_algebra %*% m2_lemur_sleep$coefficients$fixed #equivalent to line 86
enhanced_v_absence_contrast_sd <- t(enhanced_v_absence_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_absence_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
print(paste("contrast of enriched and baseline sleep marginal to order is", enhanced_v_baseline_contrast, "with sd = ", enhanced_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of impoverished and baseline sleep marginal to order is", absence_v_baseline_contrast, "with sd = ", absence_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of enriched and absence sleep marginal to order is", enhanced_v_absence_contrast, "with sd = ", enhanced_v_absence_contrast_sd, sep = " "))
contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE)
contrast_matrix
enhanced_v_absence_algebra
contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE, colnames = names(enhanced_v_absence_algebra))
?matrix
contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE, dimnames = list(NA,names(enhanced_v_absence_algebra)))
list(NA,names(enhanced_v_absence_algebra))
contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE, dimnames = list(,names(enhanced_v_absence_algebra)))
contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE, dimnames = list(c("enrich_base", "impoverish_base", "enrich_impoverish"),names(enhanced_v_absence_algebra)))
contrast_matrix
anova(m2_lemur_sleep, L = contrast_matrix)
#contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE, dimnames = list(c("enrich_base", "impoverish_base", "enrich_impoverish"),names(enhanced_v_absence_algebra)))
#using a matrix in L didn't work, went with individual tests instead
anova(m2_lemur_sleep) #significant effect of Experiment
anova(m2_lemur_sleep, L = enhanced_v_baseline_algebra) #baseline v enriched contrast, significantly different
m2_lemur_sleep$coefficients$fixed
names(m2_lemur_sleep$coefficients$fixed)
contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE, dimnames = list(c("enrich_base", "impoverish_base", "enrich_impoverish"),names(m2_lemur_sleep$coefficients$fixed)))
contrast_matrix
anova(m2_lemur_sleep, L = contrast_matrix)
anova(m2_lemur_sleep, L = contrast_matrix[1,]) #baseline v enriched contrast, significantly different
anova(m2_lemur_sleep, L = contrast_matrix[2,]) #baseline v impoverished, not significantly different
anova(m2_lemur_sleep, L = contrast_matrix[3,]) #enriched v impoverished, significant difference
anova(m2_lemur_sleep, L = contrast_matrix[1,]) #baseline v enriched contrast, significantly different
##~enhanced v baseline
enhanced_v_baseline_algebra <- c(intercept = 0, impoverish = 0, enrich = 1, enrich_first = 0, imp_by_enr1st = 0, enr_by_enr1 = 0.5) #When multiplied by coefficients matrix from model 2, calculates effect of enrichment marginal to order (with equal weights)
#effect contrasts marginal to order, get means and se
#manual calculation of mean contrast of enriched vs. impoverished; used to validate matrix multiplication methods useful for attaining contrast se, as done further below
experiment_contrast_marginal_order <- m2_lemur_sleep$coefficients$fixed["Experimentenhance"] - m2_lemur_sleep$coefficients$fixed["Experimentabsence"] + diff(m2_lemur_sleep$coefficients$fixed[c("Experimentabsence:Orderenhance","Experimentenhance:Orderenhance")])/2 #diff subtracts first element from second
##~enhanced v baseline
enhanced_v_baseline_algebra <- c(intercept = 0, impoverish = 0, enrich = 1, enrich_first = 0, imp_by_enr1st = 0, enr_by_enr1 = 0.5) #When multiplied by coefficients matrix from model 2, calculates effect of enrichment marginal to order (with equal weights)
enhanced_v_baseline_contrast <- enhanced_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
enhanced_v_baseline_contrast_sd <- t(enhanced_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~absence v baseline
absence_v_baseline_algebra <- c(intercept = 0, impoverish = 1, enrich = 0, enrich_first = 0, imp_by_enr1st = 0.5, enr_by_enr1 = 0)#When multiplied by coefficients matrix from model 2, calculates effect of impoverishment marginal to order (with equal weights)
absence_v_baseline_contrast <- absence_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
absence_v_baseline_contrast_sd <- t(absence_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% absence_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~enhanced v absence
enhanced_v_absence_algebra <- c(intercept = 0, impoverish = -1, enrich = 1, enrich_first = 0, imp_by_enr1st = -0.5, enr_by_enr1 = 0.5) #rename algebra. When multiplied by coefficients from model 2, does the algebra from line 86. Can also be multiplied by vcv to find sd.
enhanced_v_absence_contrast <- enhanced_v_absence_algebra %*% m2_lemur_sleep$coefficients$fixed #equivalent to line 86
enhanced_v_absence_contrast_sd <- t(enhanced_v_absence_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_absence_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
print(paste("contrast of enriched and baseline sleep marginal to order is", enhanced_v_baseline_contrast, "with sd = ", enhanced_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of impoverished and baseline sleep marginal to order is", absence_v_baseline_contrast, "with sd = ", absence_v_baseline_contrast_sd, sep = " "))
print(paste("contrast of enriched and absence sleep marginal to order is", enhanced_v_absence_contrast, "with sd = ", enhanced_v_absence_contrast_sd, sep = " "))
contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE, dimnames = list(c("enrich_base", "impoverish_base", "enrich_impoverish"),names(m2_lemur_sleep$coefficients$fixed)))
contrast_matrix
anova(m2_lemur_sleep, L = contrast_matrix) #significant effect of Experiment
anova(m2_lemur_sleep, L = contrast_matrix[1,]) #baseline v enriched contrast, significantly different
anova(m2_lemur_sleep, L = contrast_matrix[2,]) #baseline v impoverished, not significantly different
anova(m2_lemur_sleep, L = contrast_matrix[3,]) #enriched v impoverished, significant difference
#Should we take a more formal post-hoc approach to the multiple tests? All of the p-values would stand up to a Bonferroni adjustment so I think this is fine . . .
anova(m2_lemur_sleep, L = contrast_matrix) #significant effect of Experiment
0.5/3
1747.109-1750.985
172.429 - 1747.109
1742.429 - 1747.109
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:\\Users\\avining\\Documents\\Lemur_Sleep"))
library(tidyverse)
library(nlme)
library(RColorBrewer)
intervals(m2_lemur_sleep)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("C:\\Users\\avining\\Documents\\Lemur_Sleep"))
library(tidyverse)
library(nlme)
library(RColorBrewer)
sleep_data <- read_csv("./DATA/lemur_sleep_data.csv")
sleep_data$Session <- factor(sleep_data$Session)
sleep_data$Species <- factor(sleep_data$Species)
sleep_data$Experiment <- factor(sleep_data$Experiment, levels = c("base", "absence", "enhance")) #order factor levels of experimental condition to set up baseline as intercept
sleep_data$ID <- factor(sleep_data$ID, levels = c("Aria", "Geb", "Bertha", "Beatrice", "Avior", "Josephine", "Persephone", "Teres")) #order factor levels for nice plots
#add the experimental order to data frame (previously encoded trial by trial in the Session column)
sleep_data$Order <- rep(factor(c("absence", "enhance", "absence", "enhance", "absence", "enhance", "absence", "enhance")),
times = sapply(levels(sleep_data$ID), function(X) nrow(filter(sleep_data, ID == X))))
data_summary <- sleep_data %>% group_by(ID) %>%
summarize(Base_N = sum(Experiment == "base"),
Base_Mean = round(mean(TTST[Experiment == "base"]),1),
Base_sd = round(sd(TTST[Experiment == "base"]),2),
Enriched_N = sum(Experiment == "enhance"),
Enr_Mean = round(mean(TTST[Experiment == "enhance"]),1),
Enr_sd = round(sd(TTST[Experiment == "enhance"]),2),
Impoverished_N = sum(Experiment == "absence"),
Imp_Mean = round(mean(TTST[Experiment == "absence"]),1),
Imp_sd = round(sd(TTST[Experiment == "absence"]),2))
print(data_summary)
ggplot(sleep_data, aes(x = day.from.zero,
y = TTST)) +
geom_line(aes(color = Species,group = Session)) +
geom_point(aes(color = Species, shape = Experiment)) +
facet_wrap(~ID, ncol = 2) +
labs(x = element_text("Study Day"), y = element_text("Total 24-Hour Sleep Time"), title = element_text("Daily Lemur Sleep Patterns")) +
scale_color_brewer(palette = "Dark2") +
scale_shape_discrete(name = "Condition", labels = c("Baseline", "Impoverished","Enriched")) +
theme_classic()
m0_lemur_sleep <- lme(TTST ~ 1, data = sleep_data, random = ~1|Species/ID, method = "ML")
plot(ACF(m0_lemur_sleep, maxLag = 6), alpha = 0.01)
m1_lemur_sleep <- update(m0_lemur_sleep, correlation = corARMA(p = 1, form = ~ day.from.zero | Species/ID), method = "ML")
summary(m1_lemur_sleep)
plot(ACF(m1_lemur_sleep, maxLag = 6, resType = "n"), alpha = 0.01) #reduced lag one correlation of normalized residuals. Still notable correlation at lag 9, but given this high order, non-significance, and small dataset, probably not worth worrying about.
AIC(m0_lemur_sleep, m1_lemur_sleep)
m2_lemur_sleep <- update(m1_lemur_sleep, . ~ Experiment * Order, method = "ML")
summary(m2_lemur_sleep)
plot(ACF(m2_lemur_sleep, maxLag = 5, resType = "n"), alpha = 0.01)
AIC(m2_lemur_sleep,m1_lemur_sleep) #despite introducing some lag3 autocorrelation into within-group normalized residuals, experimental structure greatly increases the model fit.
intervals(m2_lemur_sleep)
0.886447 - 0.08314598
0.0886447 - 0.08314598
0.0886447 + 0.08314598
.2553188-0.0886447
?intervals
#effect contrasts marginal to order, get means and se
#manual calculation of mean contrast of enriched vs. impoverished; used to validate matrix multiplication methods useful for attaining contrast se, as done further below
experiment_contrast_marginal_order <- m2_lemur_sleep$coefficients$fixed["Experimentenhance"] - m2_lemur_sleep$coefficients$fixed["Experimentabsence"] + diff(m2_lemur_sleep$coefficients$fixed[c("Experimentabsence:Orderenhance","Experimentenhance:Orderenhance")])/2 #diff subtracts first element from second
##~enhanced v baseline
enhanced_v_baseline_algebra <- c(intercept = 0, impoverish = 0, enrich = 1, enrich_first = 0, imp_by_enr1st = 0, enr_by_enr1 = 0.5) #When multiplied by coefficients matrix from model 2, calculates effect of enrichment marginal to order (with equal weights)
enhanced_v_baseline_contrast <- enhanced_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
enhanced_v_baseline_contrast_se <- t(enhanced_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~absence v baseline
absence_v_baseline_algebra <- c(intercept = 0, impoverish = 1, enrich = 0, enrich_first = 0, imp_by_enr1st = 0.5, enr_by_enr1 = 0)#When multiplied by coefficients matrix from model 2, calculates effect of impoverishment marginal to order (with equal weights)
absence_v_baseline_contrast <- absence_v_baseline_algebra %*% m2_lemur_sleep$coefficients$fixed
absence_v_baseline_contrast_se <- t(absence_v_baseline_algebra) %*% vcov(m2_lemur_sleep) %*% absence_v_baseline_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
##~enhanced v absence
enhanced_v_absence_algebra <- c(intercept = 0, impoverish = -1, enrich = 1, enrich_first = 0, imp_by_enr1st = -0.5, enr_by_enr1 = 0.5) #rename algebra. When multiplied by coefficients from model 2, does the algebra from line 86. Can also be multiplied by vcv to find se.
enhanced_v_absence_contrast <- enhanced_v_absence_algebra %*% m2_lemur_sleep$coefficients$fixed #equivalent to line 86
enhanced_v_absence_contrast_se <- t(enhanced_v_absence_algebra) %*% vcov(m2_lemur_sleep) %*% enhanced_v_absence_algebra %>% #quadratic form to evaluate the variance of a contrast.sqrt(enhanced_v_absence_contrast_var)
sqrt()
print(paste("contrast of enriched and baseline sleep marginal to order is", enhanced_v_baseline_contrast, "with se = ", enhanced_v_baseline_contrast_se, sep = " "))
print(paste("contrast of impoverished and baseline sleep marginal to order is", absence_v_baseline_contrast, "with se = ", absence_v_baseline_contrast_se, sep = " "))
print(paste("contrast of enriched and absence sleep marginal to order is", enhanced_v_absence_contrast, "with se = ", enhanced_v_absence_contrast_se, sep = " "))
anova(m2_lemur_sleep, L = contrast_matrix[1,]) #baseline v enriched contrast, significantly different
contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE, dimnames = list(c("enrich_base", "impoverish_base", "enrich_impoverish"),names(m2_lemur_sleep$coefficients$fixed)))
contrast_matrix <- matrix(c(enhanced_v_baseline_algebra, absence_v_baseline_algebra, enhanced_v_absence_algebra), nrow = 3, byrow = TRUE, dimnames = list(c("enrich_base", "impoverish_base", "enrich_impoverish"),names(m2_lemur_sleep$coefficients$fixed)))
contrast_matrix
anova(m2_lemur_sleep, L = contrast_matrix) #significant effect of Experiment
anova(m2_lemur_sleep, L = contrast_matrix[1,]) #baseline v enriched contrast, significantly different
anova(m2_lemur_sleep, L = contrast_matrix[2,]) #baseline v impoverished, not significantly different
anova(m2_lemur_sleep, L = contrast_matrix[3,]) #enriched v impoverished, significant difference
#Compare sources of variance
var_cov_rand <- VarCorr(m2_lemur_sleep) #variance covaraince matrix of random effects in model 2
suppressWarnings(storage.mode(var_cov_rand) <- "numeric") #
ICC_Species <- var_cov_rand[2, "Variance"]/(sum(var_cov_rand[,"Variance"], na.rm = TRUE))
ICC_ID <- var_cov_rand[4, "Variance"]/(sum(var_cov_rand[,"Variance"], na.rm = TRUE))
ICC_Residual <- var_cov_rand[5, "Variance"]/(sum(var_cov_rand[,"Variance"], na.rm = TRUE))
ICC_Species
ICC_ID
ICC_Residual
#Compare sources of variance
var_cov_rand <- VarCorr(m2_lemur_sleep) #variance covaraince matrix of random effects in model 2
suppressWarnings(storage.mode(var_cov_rand) <- "numeric") #VarCorr returns a character table, this converts to numeric without messing up the structure
ICC_Species <- var_cov_rand[2, "Variance"]/(sum(var_cov_rand[,"Variance"], na.rm = TRUE))
ICC_ID <- var_cov_rand[4, "Variance"]/(sum(var_cov_rand[,"Variance"], na.rm = TRUE))
ICC_Residual <- var_cov_rand[5, "Variance"]/(sum(var_cov_rand[,"Variance"], na.rm = TRUE))
ICC_Species
ICC_ID
ICC_Residual
diagnostics_data <- mutate(m2_lemur_sleep$data, prediction = predict(m2_lemur_sleep), residual = residuals(m2_lemur_sleep))
ggplot(diagnostics_data) + geom_point(aes(x = prediction, y = residual/sd(residual))) + theme_classic() #Pearson's residuals on y. largely normal and homoskedastic
#Predictions don't account for AR. Why not? Is this a problem?
qqnorm(m2_lemur_sleep) #pearson residual quantiles look standard normal
#Compare sources of variance
var_cov_rand <- VarCorr(m2_lemur_sleep) #variance covaraince matrix of random effects in model 2
suppressWarnings(storage.mode(var_cov_rand) <- "numeric") #VarCorr returns a character table, this converts to numeric without messing up the structure
ICC_Species <- var_cov_rand[2, "Variance"]/(sum(var_cov_rand[,"Variance"], na.rm = TRUE))
ICC_ID <- var_cov_rand[4, "Variance"]/(sum(var_cov_rand[,"Variance"], na.rm = TRUE))
ICC_Residual <- var_cov_rand[5, "Variance"]/(sum(var_cov_rand[,"Variance"], na.rm = TRUE))
ICC_Species
ICC_ID
ICC_Residual
library(rgl)
library(sp)
setwd("C:\\Users\\avining\\Documents\\Kinkajou Navigation\\Movement Data")
Tony <- read.csv("Tony Stark cleaned.csv")
Tony <- SpatialPointsDataFrame(coords = Tony[,c(5,6)], data = Tony,
proj4string=CRS("+proj=longlat +datum=WGS84"))
Tony <- spTransform(Tony, CRS("+proj=utm +zone=17 +north +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
Tony <- as.data.frame(Tony)
colnames(Tony)[c(41,42)] <- c("Northing", "Easting")
rgl.open()
rgl.points(x = Tony$Easting, y = Tony$Northing, z = Tony$height.above.ellipsoid)
library(rgl)
library(sp)
setwd("\\10.126.19.90\EAS_ind\avining\data\AQV_kinkajou_deployments\data_processing")
Tony <- read.csv("Tony Stark cleaned.csv")
setwd("//10.126.19.90/EAS_ind/avining/data/AQV_kinkajou_deployments/data_processing")
Tony <- read.csv("Tony Stark cleaned.csv")
Tony <- SpatialPointsDataFrame(coords = Tony[,c(5,6)], data = Tony,
proj4string=CRS("+proj=longlat +datum=WGS84"))
Tony <- spTransform(Tony, CRS("+proj=utm +zone=17 +north +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"))
Tony <- as.data.frame(Tony)
setwd("C:/Users/avining/ownCloud/Alexanders_Dissertation/6. Crown Complexity/DATA/Balsa Obs Data/AO data 12_1_20")
behaviors <- read.csv("behaviorsTable.csv")
comments <- read.csv("commentsTable.csv")
continuousVariables <-  read.csv("continuousVarsTable.csv")
dayVariables <- read.csv("dayVarsTable.csv")
focals <- read.csv("focalsTable.csv")
focalVariables <- read.csv("focalVarsTable.csv")
scans <- read.csv("scansTable.csv")
scanVariables <- read.csv("scanVarsTable.csv")
sessions <- read.csv("sessionsTable.csv")
